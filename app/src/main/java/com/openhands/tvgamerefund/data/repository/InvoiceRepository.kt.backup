package com.openhands.tvgamerefund.data.repository

import android.content.Context
import android.util.Log
import com.openhands.tvgamerefund.data.models.Invoice
import com.openhands.tvgamerefund.data.models.InvoiceStatus
import com.openhands.tvgamerefund.data.network.FreeApiService
import com.openhands.tvgamerefund.data.network.FreeAuthManager
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.withContext
import okhttp3.OkHttpClient
import okhttp3.Request
import org.json.JSONException
import org.json.JSONObject
import java.io.File
import java.io.FileOutputStream
import java.text.SimpleDateFormat
import java.util.Calendar
import java.util.Date
import java.util.Locale
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class InvoiceRepository @Inject constructor(
    @ApplicationContext private val context: Context,
    private val freeApiService: FreeApiService,
    private val freeAuthManager: FreeAuthManager,
    private val okHttpClient: OkHttpClient,
    private val operatorRepository: OperatorRepository
) {
    private val TAG = "InvoiceRepository"
    
    private val _invoices = MutableStateFlow<List<Invoice>>(emptyList())
    val invoices: Flow<List<Invoice>> = _invoices.asStateFlow()
    
    /**
     * Récupère les factures disponibles pour un opérateur
     * @param operatorId Identifiant de l'opérateur
     * @param phoneNumber Numéro de téléphone
     * @return Liste des factures disponibles
     */
    suspend fun fetchInvoices(operatorId: String, phoneNumber: String): Result<List<Invoice>> = withContext(Dispatchers.IO) {
        try {
            when (operatorId) {
                "FREE" -> {
                    // Récupérer les cookies sauvegardés directement
                    val savedCookies = freeAuthManager.getSavedCookies()
                    if (savedCookies != null && savedCookies.isNotEmpty()) {
                        Log.d(TAG, "Utilisation des cookies sauvegardés pour récupérer les factures")
                        
                        // Tenter de récupérer les vraies factures avec les cookies sauvegardés
                        try {
                            val realInvoices = fetchRealFreeInvoices(savedCookies, phoneNumber)
                            if (realInvoices.isNotEmpty()) {
                                _invoices.value = realInvoices
                                return@withContext Result.success(realInvoices)
                            } else {
                                Log.w(TAG, "Aucune facture réelle trouvée avec les cookies sauvegardés")
                            }
                        } catch (e: Exception) {
                            Log.e(TAG, "Erreur lors de la récupération des factures avec les cookies sauvegardés", e)
                        }
                    }
                    
                    // Si les cookies sauvegardés ne fonctionnent pas, essayer l'authentification normale
                    val credentials = operatorRepository.getCredentials(com.openhands.tvgamerefund.data.models.Operator.FREE)
                    if (credentials != null) {
                        // Première tentative avec l'authentification standard
                        var sessionCookie = freeAuthManager.authenticate(credentials.username, credentials.password)
                        
                        // Si ça échoue, essayer l'authentification directe
                        if (sessionCookie == null) {
                            Log.d(TAG, "Authentification standard échouée, tentative d'authentification directe...")
                            sessionCookie = freeAuthManager.authenticateDirect(credentials.username, credentials.password)
                        }
                        
                        if (sessionCookie != null) {
                            // Vérifier si l'authentification a réussi
                            val isAuthenticated = freeAuthManager.isAuthenticated(sessionCookie)
                            if (isAuthenticated) {
                                Log.d(TAG, "Authentification réussie, récupération des factures...")
                                
                                // Tenter de récupérer les vraies factures
                                try {
                                    val realInvoices = fetchRealFreeInvoices(sessionCookie, phoneNumber)
                                    if (realInvoices.isNotEmpty()) {
                                        _invoices.value = realInvoices
                                        return@withContext Result.success(realInvoices)
                                    } else {
                                        Log.w(TAG, "Aucune facture réelle trouvée, utilisation des factures fictives")
                                    }
                                } catch (e: Exception) {
                                    Log.e(TAG, "Erreur lors de la récupération des factures réelles", e)
                                    Log.w(TAG, "Utilisation des factures fictives suite à l'erreur")
                                }
                            } else {
                                Log.w(TAG, "Session invalide mais cookie obtenu, tentative de récupération des factures...")
                                
                                // Même si la session n'est pas validée, essayons quand même de récupérer les factures
                                try {
                                    val realInvoices = fetchRealFreeInvoices(sessionCookie, phoneNumber)
                                    if (realInvoices.isNotEmpty()) {
                                        _invoices.value = realInvoices
                                        return@withContext Result.success(realInvoices)
                                    } else {
                                        Log.w(TAG, "Aucune facture réelle trouvée, utilisation des factures fictives")
                                    }
                                } catch (e: Exception) {
                                    Log.e(TAG, "Erreur lors de la récupération des factures réelles", e)
                                    Log.w(TAG, "Utilisation des factures fictives suite à l'erreur")
                                }
                            }
                        }
                        
                        // Si la récupération des factures réelles a échoué ou si aucune facture n'a été trouvée,
                        // on utilise des factures fictives
                        val mockInvoices = createMockInvoices(operatorId, phoneNumber)
                        _invoices.value = mockInvoices
                        return@withContext Result.success(mockInvoices)
                    } else {
                        return@withContext Result.failure(Exception("Identifiants Free non configurés"))
                    }
                }
                else -> {
                    return@withContext Result.failure(Exception("Opérateur non supporté"))
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "Erreur lors de la récupération des factures", e)
            return@withContext Result.failure(e)
        }
    }
    
    /**
     * Récupère les factures réelles de Free Mobile
     * @param sessionCookie Cookie de session
     * @param phoneNumber Numéro de téléphone
     * @return Liste des factures
     */
    private suspend fun fetchRealFreeInvoices(sessionCookie: String, phoneNumber: String): List<Invoice> = withContext(Dispatchers.IO) {
        val invoices = mutableListOf<Invoice>()
        
        try {
            Log.d(TAG, "Tentative de récupération des factures pour le numéro $phoneNumber")
            
            // Extraire les cookies importants
            val cookies = sessionCookie.split(";").map { it.trim() }
            val sessionTokenCookie = cookies.find { it.startsWith("session-token=") }
            val xUserTokenCookie = cookies.find { it.startsWith("X_USER_TOKEN=") }
            
            Log.d(TAG, "Cookies utilisés: session-token présent: ${sessionTokenCookie != null}, X_USER_TOKEN présent: ${xUserTokenCookie != null}")
            
            // Récupérer la liste des factures disponibles
            val request = Request.Builder()
                .url("https://mobile.free.fr/account/v2/api/SI/invoices")
                .header("Cookie", sessionCookie)
                .header("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
                .header("Accept", "application/json, text/plain, */*")
                .header("Accept-Language", "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7")
                .header("Referer", "https://mobile.free.fr/account/v2/mes-factures")
                .header("X-Requested-With", "XMLHttpRequest")
                .header("Connection", "keep-alive")
                .get()
                .build()
                
            val response = okHttpClient.newCall(request).execute()
            
            Log.d(TAG, "Code de réponse pour les factures: ${response.code()}")
            
            if (response.isSuccessful) {
                val responseBody = response.body()?.string() ?: ""
                
                Log.d(TAG, "Réponse pour les factures: $responseBody")
                
                // Essayer d'abord de parser en JSON
                try {
                    val jsonResponse = JSONObject(responseBody)
                    if (jsonResponse.has("invoices")) {
                        val invoicesArray = jsonResponse.getJSONArray("invoices")
                        
                        for (i in 0 until invoicesArray.length()) {
                            val invoiceObj = invoicesArray.getJSONObject(i)
                            
                            val id = invoiceObj.getString("id")
                            val dateStr = invoiceObj.getString("date")
                            val amount = invoiceObj.getDouble("amount")
                            
                            val date = try {
                                SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).parse(dateStr) ?: Date()
                            } catch (e: Exception) {
                                Date()
                            }
                            
                            val pdfUrl = "https://mobile.free.fr/account/v2/api/SI/invoice/$id"
                            
                            val invoice = Invoice(
                                id = id,
                                operatorId = "FREE",
                                phoneNumber = phoneNumber,
                                date = date,
                                amount = amount,
                                pdfUrl = pdfUrl,
                                status = InvoiceStatus.NEW,
                                hasGameFees = false
                            )
                            
                            invoices.add(invoice)
                        }
                    }
                } catch (e: JSONException) {
                    Log.e(TAG, "Erreur lors du parsing JSON, tentative avec regex", e)
                    
                    // Si le parsing JSON échoue, essayer avec regex
                    val invoicesRegex = "\"id\":\"([^\"]+)\",\"date\":\"([^\"]+)\",\"amount\":([\\d.]+)".toRegex()
                    val matches = invoicesRegex.findAll(responseBody)
                    
                    // Si aucune facture n'est trouvée après le regex, essayer de récupérer directement une facture spécifique
                    if (!matches.iterator().hasNext()) {
                        try {
                            // Essayer de récupérer la dernière facture directement
                            val directRequest = Request.Builder()
                                .url("https://mobile.free.fr/account/v2/api/SI/invoice/${phoneNumber}")
                                .header("Cookie", sessionCookie)
                                .header("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
                                .header("Accept", "application/json, text/plain, */*")
                                .header("Referer", "https://mobile.free.fr/account/v2/mes-factures")
                                .get()
                                .build()
                                
                            val directResponse = okHttpClient.newCall(directRequest).execute()
                            
                            if (directResponse.isSuccessful) {
                                val directResponseBody = directResponse.body()?.string() ?: ""
                                Log.d(TAG, "Réponse pour la facture directe: $directResponseBody")
                                
                                // Si la réponse contient un lien vers un PDF, c'est probablement une facture
                                if (directResponseBody.contains(".pdf") || directResponseBody.contains("application/pdf")) {
                                    val invoice = Invoice(
                                        id = "direct_1",
                                        operatorId = "FREE",
                                        phoneNumber = phoneNumber,
                                        date = Date(), // Date actuelle
                                        amount = 0.0, // Montant inconnu
                                        pdfUrl = "https://mobile.free.fr/account/v2/api/SI/invoice/${phoneNumber}",
                                        status = InvoiceStatus.NEW,
                                        hasGameFees = false
                                    )
                                    
                                    invoices.add(invoice)
                                }
                            }
                        } catch (e: Exception) {
                            Log.e(TAG, "Erreur lors de la récupération directe de la facture", e)
                        }
                    }
                    
                    val dateFormat = SimpleDateFormat("yyyy-MM-dd", Locale.getDefault())
                    
                    matches.forEach { match ->
                        if (match.groupValues.size >= 4) {
                            val id = match.groupValues[1]
                            val dateStr = match.groupValues[2]
                            val amount = match.groupValues[3].toDoubleOrNull() ?: 0.0
                            
                            val date = try {
                                dateFormat.parse(dateStr) ?: Date()
                            } catch (e: Exception) {
                                Date()
                            }
                            
                            val pdfUrl = "https://mobile.free.fr/account/v2/api/SI/invoice/$id"
                            
                            val invoice = Invoice(
                                id = id,
                                operatorId = "FREE",
                                phoneNumber = phoneNumber,
                                date = date,
                                amount = amount,
                                pdfUrl = pdfUrl,
                                status = InvoiceStatus.NEW,
                                hasGameFees = false
                            )
                            
                            invoices.add(invoice)
                        }
                    }
                }
                
                Log.d(TAG, "Factures réelles récupérées: ${invoices.size}")
                
                // Si aucune facture n'a été trouvée, essayer l'approche alternative
                if (invoices.isEmpty()) {
                    Log.d(TAG, "Aucune facture trouvée, tentative avec l'approche alternative")
                    val alternativeInvoices = fetchAlternativeFreeInvoices(sessionCookie, phoneNumber)
                    invoices.addAll(alternativeInvoices)
                }
            } else {
                Log.e(TAG, "Échec de la récupération des factures: ${response.code()}")
                
                // En cas d'échec, essayer l'approche alternative
                val alternativeInvoices = fetchAlternativeFreeInvoices(sessionCookie, phoneNumber)
                invoices.addAll(alternativeInvoices)
            }
        } catch (e: Exception) {
            Log.e(TAG, "Erreur lors de la récupération des factures réelles", e)
        }
        
        return@withContext invoices
    }
    
    /**
     * Méthode alternative pour récupérer les factures Free Mobile
     * en accédant directement à la page web des factures
     */
    private suspend fun fetchAlternativeFreeInvoices(sessionCookie: String, phoneNumber: String): List<Invoice> = withContext(Dispatchers.IO) {
        val invoices = mutableListOf<Invoice>()
        
        try {
            Log.d(TAG, "Tentative alternative de récupération des factures")
            
            // Accéder à la page des factures
            val request = Request.Builder()
                .url("https://mobile.free.fr/account/v2/mes-factures")
                .header("Cookie", sessionCookie)
                .header("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
                .get()
                .build()
                
            val response = okHttpClient.newCall(request).execute()
            
            if (response.isSuccessful) {
                val responseBody = response.body()?.string() ?: ""
                
                // Rechercher les liens vers les factures PDF
                val pdfLinkPattern = "href=\"([^\"]+\\.pdf)\"".toRegex()
                val matches = pdfLinkPattern.findAll(responseBody)
                
                var invoiceId = 1
                for (match in matches) {
                    val pdfUrl = match.groupValues[1]
                    
                    // Essayer d'extraire la date de l'URL ou du texte environnant
                    val datePattern = "(\\d{2}/\\d{2}/\\d{4})".toRegex()
                    val dateMatch = datePattern.find(responseBody.substring(
                        maxOf(0, match.range.first - 100),
                        minOf(responseBody.length, match.range.last + 100)
                    ))
                    
                    val date = if (dateMatch != null) {
                        SimpleDateFormat("dd/MM/yyyy", Locale.getDefault()).parse(dateMatch.groupValues[1]) ?: Date()
                    } else {
                        // Si pas de date trouvée, utiliser la date actuelle moins 1 mois * numéro de facture
                        val calendar = Calendar.getInstance()
                        calendar.add(Calendar.MONTH, -invoiceId)
                        calendar.time
                    }
                    
                    // Créer l'objet Invoice
                    val invoice = Invoice(
                        id = "alt_$invoiceId",
                        operatorId = "FREE",
                        phoneNumber = phoneNumber,
                        date = date,
                        amount = 0.0, // Montant inconnu
                        pdfUrl = if (pdfUrl.startsWith("http")) pdfUrl else "https://mobile.free.fr$pdfUrl",
                        status = InvoiceStatus.NEW,
                        hasGameFees = false
                    )
                    
                    invoices.add(invoice)
                    invoiceId++
                }
                
                Log.d(TAG, "Récupération alternative: ${invoices.size} factures trouvées")
            }
        } catch (e: Exception) {
            Log.e(TAG, "Erreur lors de la récupération alternative des factures", e)
        }
        
        return@withContext invoices
    }
    
    /**
     * Télécharge une facture
     * @param invoice Facture à télécharger
     * @return Chemin du fichier téléchargé
     */
    suspend fun downloadInvoice(invoice: Invoice): Result<String> = withContext(Dispatchers.IO) {
        try {
            when (invoice.operatorId) {
                "FREE" -> {
                    // Récupérer les cookies sauvegardés directement
                    val savedCookies = freeAuthManager.getSavedCookies()
                    if (savedCookies != null && savedCookies.isNotEmpty()) {
                        Log.d(TAG, "Utilisation des cookies sauvegardés pour télécharger la facture")
                        
                        // Extraire les cookies importants
                        val cookies = savedCookies.split(";").map { it.trim() }
                        val sessionTokenCookie = cookies.find { it.startsWith("session-token=") }
                        val xUserTokenCookie = cookies.find { it.startsWith("X_USER_TOKEN=") }
                        
                        Log.d(TAG, "Cookies utilisés pour téléchargement: session-token présent: ${sessionTokenCookie != null}, X_USER_TOKEN présent: ${xUserTokenCookie != null}")
                        
                        // Créer la requête avec les cookies sauvegardés
                        val request = Request.Builder()
                            .url(invoice.pdfUrl)
                            .addHeader("Cookie", savedCookies)
                            .addHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
                            .addHeader("Accept", "application/pdf, application/octet-stream, */*")
                            .addHeader("Accept-Language", "fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7")
                            .addHeader("Referer", "https://mobile.free.fr/account/v2/mes-factures")
                            .build()
                        
                        Log.d(TAG, "URL de téléchargement: ${invoice.pdfUrl}")
                        val response = okHttpClient.newCall(request).execute()
                            if (response.isSuccessful) {
                                // Vérifier que le contenu est bien un PDF ou un octet-stream (qui peut être un PDF)
                                val contentType = response.header("Content-Type")
                                Log.d(TAG, "Content-Type de la réponse: $contentType")
                                
                                // Accepter application/pdf ou application/octet-stream
                                if (contentType == null || (!contentType.contains("application/pdf") && !contentType.contains("octet-stream"))) {
                                    // Vérifier si le contenu commence par %PDF (signature PDF)
                                    val responseBytes = response.body()?.bytes()
                                    if (responseBytes != null && responseBytes.size > 4) {
                                        val pdfSignature = String(responseBytes.copyOfRange(0, 4))
                                        if (pdfSignature == "%PDF") {
                                            Log.d(TAG, "Le contenu commence par %PDF, c'est un PDF malgré le Content-Type")
                                        } else {
                                            Log.e(TAG, "Le contenu téléchargé n'est pas un PDF: $contentType")
                                            return@withContext Result.failure(Exception("Le contenu téléchargé n'est pas un PDF"))
                                        }
                                    } else {
                                        Log.e(TAG, "Le contenu téléchargé n'est pas un PDF: $contentType")
                                        return@withContext Result.failure(Exception("Le contenu téléchargé n'est pas un PDF"))
                                    }
                                }
                                
                                // Créer le dossier de stockage s'il n'existe pas
                                val invoicesDir = File(context.filesDir, "invoices")
                                if (!invoicesDir.exists()) {
                                    invoicesDir.mkdirs()
                                }
                                
                                // Créer le fichier de destination
                                val fileName = "invoice_${invoice.id}.pdf"
                                val file = File(invoicesDir, fileName)
                                
                                // Écrire le contenu dans le fichier
                                val bytes = response.body()?.bytes()
                                if (bytes != null && bytes.isNotEmpty()) {
                                    // Vérifier si le contenu commence par %PDF (signature PDF)
                                    if (bytes.size > 4 && String(bytes.copyOfRange(0, 4)) == "%PDF") {
                                        Log.d(TAG, "Le contenu est bien un PDF, écriture dans le fichier")
                                        FileOutputStream(file).use { outputStream ->
                                            outputStream.write(bytes)
                                        }
                                    } else {
                                        Log.e(TAG, "Le contenu ne commence pas par %PDF, mais on l'écrit quand même")
                                        // Écrire quand même le contenu pour pouvoir l'examiner
                                        FileOutputStream(file).use { outputStream ->
                                            outputStream.write(bytes)
                                        }
                                    }
                                    
                                    Log.d(TAG, "Facture téléchargée avec succès: ${file.absolutePath}")
                                    
                                    // Mettre à jour la facture avec le chemin local
                                    val updatedInvoice = invoice.copy(
                                        localPdfPath = file.absolutePath,
                                        status = InvoiceStatus.DOWNLOADED
                                    )
                                    
                                    // Mettre à jour la liste des factures
                                    _invoices.value = _invoices.value.map { 
                                        if (it.id == invoice.id) updatedInvoice else it 
                                    }
                                    
                                    return@withContext Result.success(file.absolutePath)
                                } else {
                                    Log.e(TAG, "Le contenu téléchargé est vide")
                                    return@withContext Result.failure(Exception("Le contenu téléchargé est vide"))
                                }
                            } else {
                                Log.e(TAG, "Échec du téléchargement: ${response.code()}")
                                return@withContext Result.failure(Exception("Échec du téléchargement: ${response.code()}"))
                            }
                        } else {
                            Log.e(TAG, "Échec de l'authentification")
                            return@withContext Result.failure(Exception("Échec de l'authentification"))
                        }
                    } else {
                        Log.e(TAG, "Identifiants Free non configurés")
                        return@withContext Result.failure(Exception("Identifiants Free non configurés"))
                    }
                }
                else -> {
                    Log.e(TAG, "Opérateur non supporté: ${invoice.operatorId}")
                    return@withContext Result.failure(Exception("Opérateur non supporté"))
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "Erreur lors du téléchargement de la facture", e)
            return@withContext Result.failure(e)
        }
    }
    
    /**
     * Analyse une facture pour identifier les frais de jeu
     * @param invoice Facture à analyser
     * @return Facture mise à jour avec les frais de jeu identifiés
     */
    suspend fun analyzeInvoice(invoice: Invoice): Result<Invoice> = withContext(Dispatchers.IO) {
        try {
            // Pour l'instant, on simule l'analyse
            // TODO: Implémenter l'analyse réelle des PDF avec PDFBox
            
            val updatedInvoice = invoice.copy(
                status = InvoiceStatus.ANALYZED,
                hasGameFees = true
            )
            
            // Mettre à jour la liste des factures
            _invoices.value = _invoices.value.map { 
                if (it.id == invoice.id) updatedInvoice else it 
            }
            
            return@withContext Result.success(updatedInvoice)
        } catch (e: Exception) {
            Log.e(TAG, "Erreur lors de l'analyse de la facture", e)
            return@withContext Result.failure(e)
        }
    }
    
    /**
     * Crée des factures fictives pour les tests
     */
    private fun createMockInvoices(operatorId: String, phoneNumber: String): List<Invoice> {
        val dateFormat = SimpleDateFormat("yyyyMMdd", Locale.getDefault())
        val calendar = java.util.Calendar.getInstance()
        
        val invoices = mutableListOf<Invoice>()
        
        // Facture du mois en cours
        val currentInvoice = Invoice(
            id = "INV${dateFormat.format(calendar.time)}",
            operatorId = operatorId,
            phoneNumber = phoneNumber,
            date = calendar.time,
            amount = 19.99,
            pdfUrl = "https://mobile.free.fr/account/v2/api/SI/invoice/2289514501",
            status = InvoiceStatus.NEW
        )
        invoices.add(currentInvoice)
        
        // Facture du mois précédent
        calendar.add(java.util.Calendar.MONTH, -1)
        val previousInvoice = Invoice(
            id = "INV${dateFormat.format(calendar.time)}",
            operatorId = operatorId,
            phoneNumber = phoneNumber,
            date = calendar.time,
            amount = 19.99,
            pdfUrl = "https://mobile.free.fr/account/v2/api/SI/invoice/2289514500",
            status = InvoiceStatus.NEW
        )
        invoices.add(previousInvoice)
        
        // Facture de deux mois avant
        calendar.add(java.util.Calendar.MONTH, -1)
        val olderInvoice = Invoice(
            id = "INV${dateFormat.format(calendar.time)}",
            operatorId = operatorId,
            phoneNumber = phoneNumber,
            date = calendar.time,
            amount = 19.99,
            pdfUrl = "https://mobile.free.fr/account/v2/api/SI/invoice/2289514499",
            status = InvoiceStatus.NEW
        )
        invoices.add(olderInvoice)
        
        return invoices
    }
}